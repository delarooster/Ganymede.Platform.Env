parameters:
  - name: azureSubscriptionSvcCxn
    type: string
  - name: initializeIoTCentral
    type: boolean
    default: false
  - name: createAdminUser
    type: boolean
    default: false
  - name: adminUserObjectId
    type: string
  - name: adminUserEmail
    type: string
  - name: resourceGroupName
    type: string
  - name: runPostDeploymentScripts
    type: boolean
    default: true
  - name: subscriptionId
    type: string
  - name: tenantId
    type: string
  
steps:
  - ${{ if parameters.runPostDeploymentScripts }}:
    - task: AzureCLI@2
      displayName: 'Install IoT Extensions'
      inputs:
        azureSubscription: '${{parameters.azureSubscriptionSvcCxn}}'
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
            echo '${{parameters.azureSubscriptionSvcCxn}}'
            az config set extension.use_dynamic_install=yes_without_prompt
            az extension add --name azure-iot
            echo "##[command]Set the scope to subscription id: ${{ parameters.subscriptionId }}"
            az account set -s '${{ parameters.subscriptionId }}'

    - task: AzureCLI@2
      displayName: 'Retrieve IoTC App Id'
      inputs:
        azureSubscription: '${{parameters.azureSubscriptionSvcCxn}}'
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "##[command]IoT Central app to retrieve id: $(bicepOutput.iotcName)"
          echo "##[command]Set the scope to subscription id: ${{ parameters.subscriptionId }}"
          az account set -s '${{ parameters.subscriptionId }}'

          $iotcAppId=az iot central app show `
            -n '$(bicepOutput.iotcName)' `
            -g '${{ parameters.resourceGroupName }}' `
            --subscription '${{ parameters.subscriptionId }}' `
            --query applicationId
            
          Write-Host "##vso[task.setvariable variable=iotcAppId;]$iotcAppId"

    - ${{ if parameters.createAdminUser }}:
      - task: AzureCLI@2
        displayName: 'Setup Admin user'
        inputs:
          azureSubscription: '${{parameters.azureSubscriptionSvcCxn}}'
          scriptType: 'pscore'
          scriptLocation: 'inlineScript'
          powerShellErrorActionPreference: silentlyContinue
          inlineScript: |
            echo "##[command]Create Admin User for ${{ parameters.adminUserEmail }}"
            echo "##[command]Set the scope to subscription id: ${{ parameters.subscriptionId }}"
            az account set -s '${{ parameters.subscriptionId }}'

            az iot central user create --user-id '${{ parameters.adminUserObjectId }}' `
              --app-id "$(iotcAppId)" `
              --email '${{ parameters.adminUserEmail }}' `
              --role admin `
              --subscription '${{ parameters.subscriptionId }}' `
              --tenant-id '${{ parameters.tenantId }}'

    - ${{ if parameters.initializeIoTCentral }}:
      - task: AzureCLI@2
        displayName: 'Setup IoT Central Data Export to EventHub'
        inputs:
          azureSubscription: '${{parameters.azureSubscriptionSvcCxn}}'
          scriptType: 'pscore'
          scriptLocation: 'inlineScript'
          powerShellErrorActionPreference: silentlyContinue
          inlineScript: |
            # Create new guid for destination
            $destinationGuid = [guid]::NewGuid().Guid
            $ganymedeEventHub = 'ganymede'
            $destinationDataExportName = 'Ganymede EventHub'
            [bool]$createNewDataExport = $true
            
            echo "##[command]Set the scope to subscription id: ${{ parameters.subscriptionId }}"
            az account set -s '${{ parameters.subscriptionId }}'

            echo "##[command]Check if we need to initialize this IoTC instance"
            $destinationsArray = az iot central export destination list `
              --subscription '${{ parameters.subscriptionId }}' `
              --app-id $(iotcAppId)
            
            echo "##[command]Destination Data Array value: $destinationsArray"

            foreach ($dest in $destinationsArray | ConvertFrom-Json)
            {
              echo "##[command]Destination Data Export name: $destinationDataExportName"
              if($dest.displayName -eq $destinationDataExportName)
              {
                echo "##[warning]Destination Data Export already exists, skipping creation: $destinationDataExportName"
                $createNewDataExport = $false
                break                
              }
            }
            
            echo "##[command]Create data export?: $createNewDataExport"
            if($createNewDataExport)
            {
              echo "##[command]Retrieve event hub connection string"
              $eventHubConnString=az eventhubs eventhub authorization-rule keys list `
                --resource-group '${{ parameters.resourceGroupName }}' `
                --subscription '${{ parameters.subscriptionId }}' `
                --namespace-name "$(bicepOutput.eventHubNamespace)" `
                --eventhub-name $ganymedeEventHub `
                --name "iotcSend" `
                --query primaryConnectionString
              echo "##[command]Event Hub Connection string: $eventHubConnString"

              echo "##[command]Create new iotc export destination"
              $authJson = '{""type"": ""connectionString"",""connectionString"":""' + $eventHubConnString + '""}'

              echo "##[command]Create IoT Central data destination export"
              az iot central export destination create `
                --app-id $(iotcAppId) `
                --subscription '${{ parameters.subscriptionId }}' `
                --dest-id $destinationGuid `
                --type eventhubs@v1 `
                --name $destinationDataExportName `
                --authorization $authJson
            }

            # create data exports
            $deviceConnectivityGuid = [guid]::NewGuid().Guid
            $propertyGuid = [guid]::NewGuid().Guid
            $telemetryGuid = [guid]::NewGuid().Guid
            $deviceDataExportDisplayName = "Ganymede Connectivity Events to EventHub"
            $propertyExportDisplayName = "Ganymede Property Changes to EventHub"
            $telemetryExportDisplayName = "Ganymede Telemetry to EventHub"
            [bool]$createDeviceDataExport = $true
            [bool]$createPropertyExport = $true
            [bool]$createTelemetryExport = $true
            
            $exportArray = az iot central export list `
                              --app-id $(iotcAppId) `
                              --subscription '${{ parameters.subscriptionId }}'

            foreach ($export in $exportArray | ConvertFrom-Json) 
            {
              if($export.displayName -eq $deviceDataExportDisplayName)
              {
                echo "##[warning]Device data export already exists, skipping creation: $deviceDataExportDisplayName"
                $createDeviceDataExport = $false
              }

              if($export.displayName -eq $propertyExportDisplayName)
              {
                echo "##[warning]Property export already exists, skipping creation: $propertyExportDisplayName"
                $createPropertyExport = $false
              }

              if($export.displayName -eq $telemetryExportDisplayName)
              {
                echo "##[warning]Telemetry export already exists, skipping creation: $telemetryExportDisplayName"
                $createTelemetryExport = $false
              }
            }

            echo "##[command]Retrieve data destination export id"
            $ganymedeEventHubId = az iot central export destination list `
              --app-id $(iotcAppId) `
              --subscription '${{ parameters.subscriptionId }}' `
              --query "[?displayName=='$destinationDataExportName'].id" `
              -o tsv
            $destinationJson = '[{""id"": ""' + $ganymedeEventHubId + '""}]'


            if($createDeviceDataExport)
            {
              echo "##[command]Create device data export"
              az iot central export create `
                --app-id $(iotcAppId) `
                --subscription '${{ parameters.subscriptionId }}' `
                --export-id $deviceConnectivityGuid `
                --display-name $deviceDataExportDisplayName `
                --source deviceConnectivity `
                --destinations $destinationJson
            }

            if($createPropertyExport)
            {
              echo "##[command]Create property data export"
              az iot central export create `
                --app-id $(iotcAppId) `
                --subscription '${{ parameters.subscriptionId }}' `
                --export-id $propertyGuid `
                --display-name $propertyExportDisplayName `
                --source properties `
                --destinations $destinationJson
            }

            if($createTelemetryExport)
            {
              echo "##[command]Create telemetry data export"
              az iot central export create `
                --app-id $(iotcAppId) `
                --subscription '${{ parameters.subscriptionId }}' `
                --export-id $telemetryGuid `
                --display-name $telemetryExportDisplayName `
                --source telemetry `
                --destinations $destinationJson
            }



        